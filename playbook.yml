---
- name: Setup Rosa cluster
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"

  tasks:
    - name: Get awscli bundle
      ansible.builtin.get_url:
        url: https://s3.amazonaws.com/aws-cli/awscli-bundle-1.18.200.zip
        dest: /tmp/awscli-bundle.zip

    - name: Unzip awscli-bundle.zip
      ansible.builtin.unarchive:
        src: /tmp/awscli-bundle.zip
        dest: /tmp/
        remote_src: true

    - name: Install awscli
      become: true
      ansible.builtin.command: 
        cmd: /tmp/awscli-bundle/install -i /usr/local/aws -b /bin/aws
      args:
        creates: /usr/local/aws

    - name: cleanup archive and tmp files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/awscli-bundle
        - /tmp/awscli-bundle.zip

    - name: Create .aws directory
      ansible.builtin.file:
        path: ~/.aws
        state: directory
        mode: 0755

    - name: Add aws credentials
      ansible.builtin.blockinfile:
        path: ~/.aws/credentials
        create: true
        mode: 0600
        block: |-
          [default]
          aws_access_key_id={{ aws_access_key_id }}
          aws_secret_access_key={{ aws_secret_access_key }}

    - name: Add aws config
      ansible.builtin.blockinfile:
        path: ~/.aws/config
        create: true
        mode: 0600
        block: |-
          [default]
          region={{ aws_region }}


    - name: Get ROSA CLI
      ansible.builtin.get_url:
        url: "{{ rosa_installer_url }}"
        dest: /tmp/rosa-linux.tar.gz

    - name: Unzip rosa-linux.tar.gz
      become: true
      ansible.builtin.unarchive:
        src: /tmp/rosa-linux.tar.gz
        dest: /usr/local/bin/
        remote_src: true

    - name: cleanup archive file
      ansible.builtin.file:
        path: "/tmp/rosa-linux.tar.gz"
        state: absent

    - name: Log into ROSA
      ansible.builtin.command:
        cmd: /usr/local/bin/rosa login --token {{ rosa_token }}

    - name: Init AWS account for ROSA
      ansible.builtin.command:
        cmd: /usr/local/bin/rosa init

    - name: Verify permissions for ROSA
      ansible.builtin.command:
        cmd: /usr/local/bin/rosa verify permissions

    - name: Verify quota for ROSA
      ansible.builtin.command:
        cmd: /usr/local/bin/rosa verify quota


    - name: Create ROSA Cluster
      ansible.builtin.command:
        cmd: >-
          /usr/local/bin/rosa create cluster
          --cluster-name={{ rosa_cluster_name }}
          --compute-machine-type={{ rosa_machine_type }}
          --compute-nodes={{ rosa_wroker_nodes }}
      register: _r_create_cluster
      until: _r_create_cluster.rc == 0
      retries: 5
      delay: 30

    - name: Wait 5 minutes for the ROSA installer to start
      ansible.builtin.pause:
        minutes: 5

    - name: Check for ROSA installer completion
      ansible.builtin.shell:
        cmd: >-
          /usr/local/bin/rosa describe cluster 
          -c {{ rosa_cluster_name }} | grep ^State:|awk '{print $2}'
      register: _r_rosa_installer_status
      until: _r_rosa_installer_status.stdout.find("ready") != -1
      retries: 120
      delay: 60

    - name: Get ROSA Console URL
      ansible.builtin.shell:
        cmd: >-
          /usr/local/bin/rosa describe cluster
          -c {{ rosa_cluster_name }} |grep '^Console URL:'|awk '{print $3}'
      register: _r_rosa_console_url

    - name: Create ROSA admin user
      ansible.builtin.shell:
        cmd: >-
          /usr/local/bin/rosa create admin
          --cluster={{ rosa_cluster_name }} |grep 'oc login' | awk '{print $7}'
      register: _r_rosa_admin_result

    - name: Print Login info
      ansible.builtin.debug:
        msg: "{{ _r_rosa_admin_result }}"

